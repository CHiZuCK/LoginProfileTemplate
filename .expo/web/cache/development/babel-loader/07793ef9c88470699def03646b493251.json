{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\stefa\\\\Documents\\\\Code\\\\React Native\\\\LoginProfileTemplate\\\\src\\\\screens\\\\CreateContactScreen.js\";\nimport React, { memo, useState, useEffect } from 'react';\nimport Background from \"../components/Background\";\nimport Header from \"../components/Header\";\nimport Paragraph from \"../components/Paragraph\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport global from \"../global.js\";\nimport { theme } from \"../core/theme\";\n\nvar CreateContactScreen = function CreateContactScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      fName = _useState2[0],\n      setfName = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lName = _useState4[0],\n      setlName = _useState4[1];\n\n  var _useState5 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      contactEmail = _useState6[0],\n      setContactEmail = _useState6[1];\n\n  var _useState7 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      contactPhone = _useState8[0],\n      setContactPhone = _useState8[1];\n\n  var _createContact = function _createContact() {\n    var data;\n    return _regeneratorRuntime.async(function _createContact$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = {\n              firstName: fName.value,\n              lastName: lName.value,\n              email: contactEmail.value,\n              cellPhone: contactPhone.value\n            };\n            fetch('http://159.89.153.162:5000/api/v1/profile/contacts', {\n              method: 'PUT',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + global.Token\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    label: \"Name\",\n    returnKeyType: \"next\",\n    value: fName.value,\n    onChangeText: function onChangeText(text) {\n      return setfName({\n        value: text,\n        error: ''\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Last Name\",\n    returnKeyType: \"next\",\n    value: lastname.value,\n    onChangeText: function onChangeText(text) {\n      return setlName({\n        value: text,\n        error: ''\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Email\",\n    returnKeyType: \"next\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setContactEmail({\n        value: text,\n        error: ''\n      });\n    },\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Cell Phone\",\n    returnKeyType: \"next\",\n    value: cellphone.value,\n    onChangeText: function onChangeText(text) {\n      return setContactPhone({\n        value: text,\n        error: ''\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    mode: \"outlined\",\n    onPress: _createContact,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Create Contact\")));\n};\n\nexport default memo(CreateContactScreen);","map":{"version":3,"sources":["C:/Users/stefa/Documents/Code/React Native/LoginProfileTemplate/src/screens/CreateContactScreen.js"],"names":["React","memo","useState","useEffect","Background","Header","Paragraph","Button","TextInput","ImagePicker","global","theme","CreateContactScreen","navigation","route","value","error","fName","setfName","lName","setlName","contactEmail","setContactEmail","contactPhone","setContactPhone","_createContact","data","firstName","lastName","email","cellPhone","fetch","method","headers","Accept","Authorization","Token","body","JSON","stringify","text","lastname","cellphone"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from 'react';\r\nimport Background from '../components/Background';\r\nimport Header from '../components/Header';\r\nimport Paragraph from '../components/Paragraph';\r\nimport Button from '../components/Button';\r\nimport TextInput from '../components/TextInput';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { Image, ScrollView, View, TouchableOpacity } from 'react-native';\r\nimport global from '../global.js';\r\n\r\nimport { theme } from '../core/theme';\r\n\r\nconst CreateContactScreen = ({ navigation, route }) => {\r\n  const [fName, setfName] = useState({value: '', error: ''});\r\n  const [lName, setlName] = useState({value: '', error: ''});\r\n  const [contactEmail, setContactEmail] = useState({value: '', error: ''});\r\n  const [contactPhone, setContactPhone] = useState({value: '', error: ''});\r\n\r\n  const _createContact = async () => {\r\n    var data = {\r\n      firstName: fName.value,\r\n      lastName: lName.value,\r\n      email: contactEmail.value,\r\n      cellPhone: contactPhone.value\r\n    };\r\n    fetch('http://159.89.153.162:5000/api/v1/profile/contacts', {\r\n      method: 'PUT',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + global.Token,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Background>\r\n      <ScrollView>\r\n        <TextInput\r\n          label=\"Name\"\r\n          returnKeyType=\"next\"\r\n          value={fName.value}\r\n          onChangeText={text => setfName({ value: text, error: '' })}\r\n        />\r\n\r\n        <TextInput\r\n          label=\"Last Name\"\r\n          returnKeyType=\"next\"\r\n          value={lastname.value}\r\n          onChangeText={text => setlName({ value: text, error: '' })}\r\n        />\r\n\r\n        <TextInput\r\n          label=\"Email\"\r\n          returnKeyType=\"next\"\r\n          value={email.value}\r\n          onChangeText={text => setContactEmail({ value: text, error: '' })}\r\n          autoCapitalize=\"none\"\r\n          autoCompleteType=\"email\"\r\n          textContentType=\"emailAddress\"\r\n          keyboardType=\"email-address\"\r\n        />\r\n\r\n        <TextInput\r\n          label=\"Cell Phone\"\r\n          returnKeyType=\"next\"\r\n          value={cellphone.value}\r\n          onChangeText={text => setContactPhone({ value: text, error: '' })}\r\n        />\r\n\r\n        <Button mode=\"outlined\" onPress={_createContact}>\r\n          Create Contact\r\n        </Button>\r\n      </ScrollView>\r\n    </Background>\r\n  );\r\n};\r\n\r\nexport default memo(CreateContactScreen);\r\n"]},"metadata":{},"sourceType":"module"}